import {
  Column,
  DataType,
  ForeignKey,
  Model,
  Table,
  Validate,
} from "sequelize-typescript";
// import { SubcontrolEU } from "./subcontrolEU.model";
import { ControlCategoryStructEUModel } from "./controlCategoryStructEU.model";
import { UserModel } from "../../domain.layer/models/user/user.model";
import { SubcontrolEU } from "./subControlEU.model";
import { ProjectFrameworksModel } from "../projectFrameworks.model";
import { StatusCompliance, STATUSES_COMPLIANCE } from "../../types/status.type";

/*

This is the new Control model(Schema) and will be replaced with the new one.
Please align other files with this

*/
export type ControlEU = {
  id?: number; // auto generated by database
  status?: StatusCompliance; // won't get any values, will be filled by user
  approver?: number; // won't get any values, will be filled by user
  risk_review?: "Acceptable risk" | "Residual risk" | "Unacceptable risk"; // won't get any values, will be filled by user
  owner?: number; // won't get any values, will be filled by user
  reviewer?: number; // won't get any values, will be filled by user
  due_date?: Date; // won't get any values, will be filled by user
  implementation_details?: string; // won't get any values, will be filled by user
  control_meta_id: number; // when control category is created, its id will be stored and assign here as FK
  projects_frameworks_id: number; // FK to the project table
  numberOfSubcontrols?: number;
  numberOfDoneSubcontrols?: number;
  subControls?: SubcontrolEU[];
  created_at?: Date;
};

@Table({
  tableName: "controls_eu",
})
export class ControlEUModel extends Model<ControlEU> {
  @Column({
    type: DataType.INTEGER,
    autoIncrement: true,
    primaryKey: true,
  })
  id?: number;

  @Column({
    // define ENUM constraint at DB level
    type: DataType.ENUM(...STATUSES_COMPLIANCE),
  })
  status?: StatusCompliance;

  @ForeignKey(() => UserModel)
  @Column({
    type: DataType.INTEGER,
  })
  approver?: number;

  @Column({
    type: DataType.ENUM(
      "Acceptable risk",
      "Residual risk",
      "Unacceptable risk"
    ),
  })
  risk_review?: "Acceptable risk" | "Residual risk" | "Unacceptable risk";

  @ForeignKey(() => UserModel)
  @Column({
    type: DataType.INTEGER,
  })
  owner?: number;

  @ForeignKey(() => UserModel)
  @Column({
    type: DataType.INTEGER,
  })
  reviewer?: number;

  @Column({
    type: DataType.DATE,
  })
  due_date?: Date;

  @Column({
    type: DataType.STRING,
  })
  implementation_details?: string;

  @ForeignKey(() => ControlCategoryStructEUModel)
  @Column({
    type: DataType.INTEGER,
  })
  control_meta_id!: number;

  @ForeignKey(() => ProjectFrameworksModel)
  @Column({
    type: DataType.INTEGER,
  })
  projects_frameworks_id!: number;

  @Column({
    type: DataType.BOOLEAN,
    allowNull: false,
    defaultValue: false,
  })
  is_demo?: boolean;

  @Column({
    type: DataType.DATE,
  })
  created_at?: Date;
}
