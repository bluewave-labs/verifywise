/**
 * Generates a markdown report for assessment tracker
 * @param frameworkId - The ID of the framework
 * @param data - Project metadata including title and owner
 * @returns Promise<string> - Markdown formatted assessment tracker report
 */

import { TopicStructEU } from "../../domain.layer/frameworks/EU-AI-Act/topicStructEU.model";
import { SubtopicStructEU } from "../../domain.layer/frameworks/EU-AI-Act/subTopicStructEU.model";
import { QuestionStructEU } from "../../domain.layer/frameworks/EU-AI-Act/questionStructEU.model";
import { getAssessmentReportQuery } from "../../utils/reporting.utils";
import { ReportBodyData } from "../reportService";

type Question = QuestionStructEU & {
  answer: string;
};

type SubTopic = SubtopicStructEU & {
  questions: Question[];
};

type AllTopics = TopicStructEU & {
  subtopics: SubTopic[];
};

export async function getAssessmentTrackerMarkdown(
  projectId: number,
  frameworkId: number,
  data: ReportBodyData,
  tenant: string
): Promise<string> {
  const assessmentReportData = await getAssessmentTrackerReportData(
    projectId,
    frameworkId,
    tenant
  );

  const assessmentMD = `
${data.organizationName || "VerifyWise"} assessment tracker report
========================

This report is generated by the VerifyWise Assessment Tracker. It aims to provide a way to demonstrate their claims about the risks of their AI systems.

- **Date** ${new Date().toLocaleDateString()}
- **Project** ${data.projectTitle}
- **Owner** ${data.projectOwner}

${assessmentReportData}
  `;
  return assessmentMD;
}

/**
 * Retrieves all assessment tracker data by projectId and framworkId from DB
 * @param projectId - The ID of the project
 * @param frameworkId - The ID of the framework
 * @returns Promise<string> - Assessment tracker data
 */
export async function getAssessmentTrackerReportData(
  projectId: number,
  frameworkId: number,
  tenant: string
): Promise<string> {
  let rows: string = ``;
  try {
    const reportData = (await getAssessmentReportQuery(
      projectId,
      frameworkId,
      tenant
    )) as AllTopics[];

    if (reportData.length > 0) {
      rows = reportData
        .map((assessment) => {
          const subTopic =
            assessment.subtopics?.length > 0
              ? assessment.subtopics
                  .map((subtopic) => {
                    const questionList =
                      subtopic.questions?.length > 0
                        ? subtopic.questions
                            .map(
                              (q, i) =>
                                `    ${i + 1}. __${q.question}__<br>${
                                  q.answer || "(No answer for this question.)"
                                }`
                            )
                            .join("\n")
                        : `No question for this topic.`;
                    return `  - ${subtopic.title}\n${questionList}\n`;
                  })
                  .join("\n")
              : `No data`;

          return `__${assessment?.title}__\n${subTopic}\n`;
        })
        .join("\n");
    } else {
      rows = `-`;
    }
  } catch (error) {
    console.error(error);
    throw new Error(`Error while fetching the assessment tracker data`);
  }

  return rows;
}
