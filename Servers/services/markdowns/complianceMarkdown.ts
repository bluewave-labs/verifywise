/**
 * Generates a markdown report for compliance tracker
 * @param frameworkId - The ID of the framework: EU AI Act
 * @param data - Project metadata including title and owner
 * @returns Promise<string> - Markdown formatted assessment tracker report
 */

import { getComplianceReportQuery } from "../../utils/reporting.utils";
import { ReportBodyData } from "../reportService";
import { ControlCategoryStructEUModel } from "../../domain.layer/frameworks/EU-AI-Act/controlCategoryStructEU.model";
import {
  SubcontrolStructEU,
  SubcontrolStructEUModel,
} from "../../domain.layer/frameworks/EU-AI-Act/subControlStructEU.model";
import { ControlStructEUModel } from "../../domain.layer/frameworks/EU-AI-Act/controlStructEU.model";
import { ControlEUModel } from "../../domain.layer/frameworks/EU-AI-Act/controlEU.model";
import { SubcontrolEUModel } from "../../domain.layer/frameworks/EU-AI-Act/subControlEU.model";

type SubControlProps = SubcontrolStructEU & {
  implementation_details: string;
};

type ControlProps = {
  title: string;
  implementation_details: string;
  subControls: SubControlProps[];
};

type SubControlCategory = {
  data: ControlProps;
};

export async function getComplianceMarkdown(
  projectFrameworkId: number,
  data: ReportBodyData,
  tenant: string
): Promise<string> {
  const reportData = await getComplianceReportData(projectFrameworkId, tenant);

  const complianceMD = `
${data.organizationName || "VerifyWise"} compliance tracker report
========================

This report is generated by the VerifyWise Compliance Tracker. It aims to provide a way to demonstrate their claims about the risks of their AI systems.

- **Date** ${new Date().toLocaleDateString()}
- **Project** ${data.projectTitle}
- **Owner** ${data.projectOwner}

${reportData}
`;
  return complianceMD;
}

/**
 * Retrieves all compliance tracker data by framworkId from DB
 * @param frameworkId - The ID of the framework
 * @returns Promise<string> - Compliance tracker data
 */
export async function getComplianceReportData(
  projectFrameworkId: number,
  tenant: string
): Promise<string> {
  let rows: string = ``;
  try {
    const reportData = await getComplianceReportQuery(projectFrameworkId, tenant);
    if (reportData.length > 0) {
      rows = reportData
        .map((_controlCategories) => {
          let controlCategories =
            _controlCategories.dataValues as ControlCategoryStructEUModel & {
              controls: (ControlStructEUModel &
                ControlEUModel & {
                  subControls: (SubcontrolEUModel & SubcontrolStructEUModel)[];
                })[];
            };
          const controls =
            controlCategories.controls.length > 0
              ? controlCategories.controls
                  .map((control) => {
                    const controlCategoryData = `__${control.title}__<br> Implementation detail: ${control.implementation_details}`;
                    const subControls =
                      control.subControls?.length > 0
                        ? control.subControls
                            .map(
                              (subcontrol, j) =>
                                `    ${j + 1}. __${
                                  subcontrol.title
                                }__<br> Implementation detail: ${
                                  subcontrol.implementation_details
                                }`
                            )
                            .join("\n")
                        : `No question for this topic.`;
                    return `  - ${controlCategoryData}\n${subControls}\n`;
                  })
                  .join("\n")
              : `No data`;

          return `__${controlCategories?.title}__\n${controls}\n`;
        })
        .join("\n");
    } else {
      rows = `-`;
    }
  } catch (error) {
    console.error(error);
    throw new Error(`Error while fetching the compliance tracker data`);
  }

  return rows;
}
