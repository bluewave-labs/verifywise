import { getProjectRisksReportQuery, getMembersByProjectIdQuery } from "../utils/reporting.utils";
import { DefaultReportName, ReportType } from "../models/reporting.model";
import { getVendorRisksByProjectIdQuery } from "../utils/vendorRisk.util";
import { getVendorByProjectIdQuery } from "../utils/vendor.utils";
import { getUserByIdQuery } from "../utils/user.utils";

interface reportBodyData {
  projectTitle: string,
  projectOwner: string
}

/** 
 * Format the report name
 * if request body includes report name, return the report name as user requested
 * If not, return as {type}_{YYYYMMDD}_{HHMMSS}
*/
export function getFormattedReportName(name: string, type: string) {
  let reportType;
  switch(type) {
    case ReportType.PROJECTRISK_REPORT:
      reportType = DefaultReportName.PROJECTRISK_REPORT;
      break;
    case ReportType.VENDOR_REPORT:
      reportType = DefaultReportName.VENDOR_REPORT;
      break;
    case ReportType.ASSESSMENT_REPORT:
      reportType = DefaultReportName.ASSESSMENT_REPORT;
      break;
    case ReportType.COMPLIANCE_REPORT:
      reportType = DefaultReportName.COMPLIANCE_REPORT;
      break;
    default:
      reportType = DefaultReportName.ALL_REPORT;
  }

  const date = new Date();
  
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');

  const hour = String(date.getHours()).padStart(2, '0');
  const minute = String(date.getMinutes()).padStart(2, '0');
  const second = String(date.getSeconds()).padStart(2, '0');

  if(name.length === 0 ) {
    return `${type}_${year}${month}${day}_${hour}${minute}${second}`;
  } else {
    return name;
  }
}

/*
  Get member lists by projectId
  Check whether the user belongs to current project
*/
export async function isAuthorizedUser(
  projectId: number,
  userId: number
) : Promise<any> {
  const members = await getMembersByProjectIdQuery(projectId);
  const membersArray = members.map(m => m.user_id);

  if(!membersArray.includes(userId)){
    return false;
  }else{
    return true;
  }
}

/*
  Get report data base on requested report type
*/
export async function getReportData(
    projectId: number,
    frameworkId: number,
    reportType: string,
    reportBody: reportBodyData
  ) : Promise<any> {
  let markdownFormattedData;
  switch(reportType) {
    case ReportType.PROJECTRISK_REPORT:
      markdownFormattedData = getProjectRiskMarkdown(projectId, reportBody)
      break;
    case ReportType.VENDOR_REPORT:
      markdownFormattedData = await getVendorReportMarkdown(projectId, reportBody)
      break;
    default:
      throw new Error(`Report type "${reportType}" is not supported`);
  }
  return markdownFormattedData;
}
  
/*
  This is the markdown data for project risk report
*/
export async function getProjectRiskMarkdown (
    projectId: number,
    data: reportBodyData
  ) : Promise<any> {
  let rows: string;
  const reportData = await getProjectRisksReportQuery(projectId);

  if (reportData.length > 0) {
    rows = reportData.map((risk: { risk_name: any; risk_owner: any; risk_severity: any; likelihood: any; approval_status: any; risk_level_autocalculated: any; deadline: { toLocaleDateString: () => any; }; }) => 
      `| ${risk.risk_name} | ${risk.risk_owner} | ${risk.risk_severity} | ${risk.likelihood} | ${risk.approval_status} | ${risk.risk_level_autocalculated} | ${risk.deadline.toLocaleDateString()} |`
    ).join('\n');
  } else {
    rows = `| - | - | - | - | - | - | - |`
  }

  const projectRiskMD = `
VerifyWise project risk report
========================

This report is generated by the VeriftyWise Project Risk. It aims to provide a way to demonstrate their claims about the risks of their AI systems.
  
- **Date** ${new Date().toLocaleDateString()}
- **Project** ${data.projectTitle}
- **Owner** ${data.projectOwner}

Project risk table
-------------
| Risk Name | Owner | Severity | Likelihood | Mitigation Status	| Risk Level | Target Date | 
|----|----|----|----|----|----|----|
${rows}
`
  return projectRiskMD;
}

/**
 * Generates a markdown report for vendor risks
 * @param projectId - The ID of the project
 * @param data - Project metadata including title and owner
 * @returns Promise<string> - Markdown formatted vendor risk report
 */
export async function getVendorReportMarkdown(
  projectId: number,
  data: reportBodyData
): Promise<any> {
  const vendorData = await getVendorByProjectIdQuery(projectId);
  const riskData = await getVendorRisksByProjectIdQuery(projectId);

  const vendorRows: string =
    vendorData && vendorData.length > 0
      ? await Promise.all(
          vendorData.map(async (vendor) => {
            const vendorAssignee = await getUserByIdQuery(vendor.assignee);
            return `| ${vendor.vendor_name} | ${vendorAssignee.name} ${
              vendorAssignee.surname
            } | ${vendor.review_status} | ${
              vendor.risk_status
            } | ${vendor.review_date.toLocaleDateString()} |`;
          })
        ).then((rows) => rows.join("\n"))
      : "| - | - | - | - | - |";

  const riskRows: string =
    riskData && riskData.length > 0
      ? await Promise.all(
          riskData.map(async (risk) => {
            const riskActionOwner = await getUserByIdQuery(risk.action_owner);
            return `| ${risk.impact} | ${risk.likelihood} | ${risk.risk_severity} | ${riskActionOwner.name} ${riskActionOwner.surname} | ${risk.risk_level} | ${risk.risk_description} |`;
          })
        ).then((rows) => rows.join("\n"))
      : "| - | - | - | - | - | - |";

  return `
VerifyWise vendors and vendor risks report
-------------
This report is generated by VerifyWise. It aims to give information about the company's vendors and corresponding vendor risks.
  
- **Date**: ${new Date().toLocaleDateString()}
- **Project**: ${data.projectTitle}
- **Owner**: ${data.projectOwner}

Vendors table
-------------
| Vendor Name | Assignee | Review Status | Risk Status | Review Date |
|----|----|----|----|----|
${vendorRows}

Vendor risk table
-------------
| Impact | Likelihood | Risk Severity | Action Owner | Risk Level | Risk Description |
|----|----|----|----|----|----|
${riskRows}
`;
}
