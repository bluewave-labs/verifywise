/**
 * Generates a markdown report for vendor risks
 * @param projectId - The ID of the project
 * @param data - Project metadata including title and owner
 * @returns Promise<string> - Markdown formatted vendor risk report
 */

import { getUserByIdQuery } from "../../utils/user.utils";
import { getVendorByProjectIdQuery } from "../../utils/vendor.utils";
import { getVendorRisksByProjectIdQuery } from "../../utils/vendorRisk.utils";
import { ReportBodyData } from "../reportService";

export async function getVendorReportMarkdown(
    projectId: number,
    data: ReportBodyData,
    tenant: string
  ): Promise<string> {
    const vendorReportData = await getVendorReportData(projectId, tenant);
    const riskReportData = await getVendorRiskReportData(projectId, tenant);
      
  return `
${data.organizationName || 'VerifyWise'} vendors and vendor risks report
-------------
This report is generated by VerifyWise. It aims to give information about the company's vendors and corresponding vendor risks.
  
- **Date**: ${new Date().toLocaleDateString()}
- **Project**: ${data.projectTitle}
- **Owner**: ${data.projectOwner}

${vendorReportData}
${riskReportData}
`;
}

/**
 * Retrieves all vendor data by projectId from DB
 * @param projectId - The ID of the project
 * @returns Promise<string> - Vendor table
*/
export async function getVendorReportData(
  projectId: number,
  tenant: string
): Promise<string> {
  let vendorRows: string = ``;
  try {
    const vendorData = await getVendorByProjectIdQuery(projectId, tenant);
    vendorRows =
      vendorData && vendorData.length > 0
        ? await Promise.all(
            vendorData.map(async (vendor) => {
              const vendorAssignee = await getUserByIdQuery(vendor.assignee);
              return `| ${vendor.vendor_name} | ${vendorAssignee.name} ${
                vendorAssignee.surname
              } | ${vendor.review_status} | ${
                vendor.risk_status
              } | ${vendor.review_date.toLocaleDateString()} |`;
            })
          ).then((rows) => rows.join("\n"))
        : "| - | - | - | - | - |";
  } catch (error) {
    throw new Error(`Error while fetching the vendor report data`);  
  }

  return `
Vendor table
-------------
| Vendor Name | Assignee | Review Status | Risk Status | Review Date |
|----|----|----|----|----|
${vendorRows}
`;
}

/**
 * Retrieves all vendor risk data by projectId from DB
 * @param projectId - The ID of the project
 * @returns Promise<string> - Vendor risk table
*/
export async function getVendorRiskReportData(
  projectId: number,
  tenant: string
): Promise<string> {
  let riskRows: string = ``;
  try {
    const riskData = await getVendorRisksByProjectIdQuery(projectId, tenant);
    riskRows =
      riskData && riskData.length > 0
        ? await Promise.all(
            riskData.map(async (risk) => {
              const riskActionOwner = await getUserByIdQuery(risk.action_owner);
              return ` | ${risk.likelihood} | ${risk.risk_severity} | ${riskActionOwner.name} ${riskActionOwner.surname} | ${risk.risk_level} | ${risk.risk_description} |`;
            })
          ).then((rows) => rows.join("\n"))
        : "| - | - | - | - | - |";
  } catch (error) {
    throw new Error(`Error while fetching the vendor risk report data`);  
  }

  return `
Vendor risk table
-------------
| Likelihood | Risk Severity | Action Owner | Risk Level | Risk Description |
|----|----|----|----|----|
${riskRows}
`;
}
