/**
 * Generates a markdown report for annexes tracker
 * @param frameworkId - The ID of the framework: ISO 42001
 * @param data - Project metadata including title and owner
 * @returns Promise<string> - Markdown formatted assessment tracker report
*/

import { AnnexCategoryStructISO } from '../../models/ISO-42001/annexCategoryStructISO.model';
import { AnnexStructISOModel } from '../../models/ISO-42001/annexStructISO.model';
import { getAllAnnexesWithCategoriesQuery } from '../../utils/iso42001.utils';
import { getAnnexesReportQuery } from '../../utils/reporting.utils';
import { ReportBodyData } from '../reportService';

type AnnexCategory = AnnexCategoryStructISO & {
  is_applicable: boolean,
  implementation_description: string,
  justification_for_exclusion: string,
};

type AllAnnexes = AnnexStructISOModel & {
  annexCategories: AnnexCategory[];
};

export async function getAnnexesMarkdown (
  frameworkId: number,
  data: ReportBodyData
) : Promise<string> {
  const reportData = await getClausesAndAnnexesReportData(frameworkId);

  const markdown = `
VerifyWise annexes report
========================

This report is generated by the VerifyWise ISO 42001 framework. It aims to provide a way to demonstrate their claims about the risks of their AI systems.

- **Date** ${new Date().toLocaleDateString()}
- **Project** ${data.projectTitle}
- **Owner** ${data.projectOwner}

${reportData}
`
  return markdown;
}

export async function getClausesAndAnnexesReportData (
  frameworkId: number
) : Promise<string> {
  let rows: string = ``;
  try {
    const reportData = await getAnnexesReportQuery(frameworkId) as AllAnnexes[];
    if (reportData.length > 0) {
        rows = reportData.map(annexes =>{
          const  subTopic = annexes.annexCategories?.length > 0
            ? annexes.annexCategories.map((annexCategory, i) => {
              const status = annexCategory.is_applicable ? `Implementation Description: ${annexCategory.implementation_description}` : `Justification for Exclusion: ${annexCategory.justification_for_exclusion}}`
              
              const res = `__A${annexes.annex_no}${i+1}. ${annexCategory.title}__ <br> Applicability: ${annexCategory.is_applicable}<br> ${status}`
              return `  - ${res}\n`;
            }).join('\n')          
            : `No data`;
          
          return `__${annexes?.title}__\n${subTopic}\n`;
        }).join('\n');
    } else {
      rows = `-`
    }
  } catch (error) {
    console.error(error);
    throw new Error(`Error while fetching the clauses and annexes data`);    
  }
  return rows;
}