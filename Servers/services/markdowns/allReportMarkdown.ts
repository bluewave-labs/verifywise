/**
 * Generates a report for EU AI Act or ISO 42001 frameworks
 * EU AI Act framwork report includes project risk, vendors and vendor risks, compliance tracker, and assessment tracker reports
 * ISO 42001 framework report includse project risk, vendors and vendor risks, annexes and clauses reports
 * @param frameworkId - The IDs of the framework: EU AI Act and ISO 42001
 * @param data - Project metadata including title and owner
 * @returns Promise<string> - Markdown formatted report
 */

import { getAllFrameworkByIdQuery } from "../../utils/framework.utils";
import { ReportBodyData } from "../reportService";
import { getClausesAndAnnexesReportData } from "./annexesMarkdown";
import { getAssessmentTrackerReportData } from "./assessmentTrackerMarkdown";
import { getComplianceReportData } from "./complianceMarkdown";
import { getProjectRiskReportData } from "./projectRiskMarkdown";
import {
  getVendorReportData,
  getVendorRiskReportData,
} from "./vendorAndRisksMarkdown";

export async function getAllReportMarkdown(
  frameworkId: number,
  projectFrameworkId: number,
  projectId: number,
  data: ReportBodyData,
  tenant: string
): Promise<string> {
  try {
    const framework = await getAllFrameworkByIdQuery(frameworkId, tenant);

    if (framework) {
      let projectReportMarkdown = await getProjectRiskReportData(projectId, tenant);
      let vendorReportMarkdown = await getVendorReportData(projectId, tenant);
      let vendorRiskReportMarkdown = await getVendorRiskReportData(projectId, tenant);

      if (framework.name === "EU AI Act") { 
        const complianceReportMarkdown = await getComplianceReportData(projectFrameworkId, tenant);
        const assessmentReportMarkdown = await getAssessmentTrackerReportData(projectId, frameworkId, tenant);

        const euAIMD = `
${data.organizationName || 'VerifyWise'} ${framework.name} report
========================

This report is generated by VerifyWise. It aims to provide a way to demonstrate their claims about the risks of their AI systems.
  
- **Date** ${new Date().toLocaleDateString()}
- **Project** ${data.projectTitle}
- **Owner** ${data.projectOwner}

This report includes reports for
- Project risks
- Vendors and risks
- Compliance tracker
- Assessment tracker

Project risk report
-------------
${projectReportMarkdown}

Vendor and vendor risk report
-------------
${vendorReportMarkdown}
${vendorRiskReportMarkdown}

Compliance tracker report
-------------
${complianceReportMarkdown}

Assessment tracker report
-------------
${assessmentReportMarkdown}
`;
        return euAIMD;
      } else {        
        let clausesAndAnnexesMarkdown = await getClausesAndAnnexesReportData(projectFrameworkId, tenant);
        const isoMD = `
${data.organizationName || 'VerifyWise'} ${framework.name} report
========================

This report is generated by VerifyWise. It aims to provide a way to demonstrate their claims about the risks of their AI systems.
  
- **Date** ${new Date().toLocaleDateString()}
- **Project** ${data.projectTitle}
- **Owner** ${data.projectOwner}

This report includes reports for
- Project risks
- Vendors and risks
- Clauses and annexes

Project risk report
-------------
${projectReportMarkdown}

Vendor and vendor risk report
-------------
${vendorReportMarkdown}
${vendorRiskReportMarkdown}

Clauses and annexes report
-------------
${clausesAndAnnexesMarkdown}

`;
        return isoMD;
      }
    } else {
      throw new Error(`Framework with ID ${frameworkId} not found`);
    }
  } catch (error) {
    console.error("Error generating all reports markdown:", error);
    throw new Error(
      `Failed to generate all reports: ${
        error instanceof Error ? error.message : "Unknown error"
      }`
    );
  }
}
