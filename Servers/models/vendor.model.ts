import {
  Column,
  DataType,
  ForeignKey,
  Model,
  Table,
} from "sequelize-typescript";
import { UserModel } from "../domain.layer/models/user/user.model";

/*

This is the new Vendor model(Schema) and will be replaced with the new one.
Please align other files with this

*/
export type Vendor = {
  id?: number; // auto generated by database
  order_no?: number; // gets assigned from the structure
  projects?: any[]; // won't get any values, will be filled by user
  vendor_name: string; // won't get any values, will be filled by user
  vendor_provides: string; // won't get any values, will be filled by user
  assignee: number; // won't get any values, will be filled by user
  website: string; // won't get any values, will be filled by user
  vendor_contact_person: string; // won't get any values, will be filled by user
  review_result: string; // won't get any values, will be filled by user
  review_status:
    | "Not started"
    | "In review"
    | "Reviewed"
    | "Requires follow-up"; // won't get any values, will be filled by user
  reviewer: number; // won't get any values, will be filled by user
  risk_status:
    | "Very high risk"
    | "High risk"
    | "Medium risk"
    | "Low risk"
    | "Very low risk"; // won't get any values, will be filled by user
  review_date: Date; // won't get any values, will be filled by user
  created_at?: Date;
};

@Table({
  tableName: "vendors",
})
export class VendorModel extends Model<Vendor> {
  @Column({
    type: DataType.INTEGER,
    autoIncrement: true,
    primaryKey: true,
  })
  id?: number;

  @Column({
    type: DataType.INTEGER,
  })
  order_no?: number;

  @Column({
    type: DataType.STRING,
  })
  vendor_name!: string;

  @Column({
    type: DataType.STRING,
  })
  vendor_provides!: string;

  @ForeignKey(() => UserModel)
  @Column({
    type: DataType.INTEGER,
  })
  assignee!: number;

  @Column({
    type: DataType.STRING,
  })
  website!: string;

  @Column({
    type: DataType.STRING,
  })
  vendor_contact_person!: string;

  @Column({
    type: DataType.STRING,
  })
  review_result!: string;

  @Column({
    type: DataType.ENUM(
      "Not started",
      "In review",
      "Reviewed",
      "Requires follow-up"
    ),
  })
  review_status!:
    | "Not started"
    | "In review"
    | "Reviewed"
    | "Requires follow-up";

  @ForeignKey(() => UserModel)
  @Column({
    type: DataType.INTEGER,
  })
  reviewer!: number;

  @Column({
    type: DataType.ENUM(
      "Very high risk",
      "High risk",
      "Medium risk",
      "Low risk",
      "Very low risk"
    ),
  })
  risk_status!:
    | "Very high risk"
    | "High risk"
    | "Medium risk"
    | "Low risk"
    | "Very low risk";

  @Column({
    type: DataType.DATE,
  })
  review_date!: Date;

  @Column({
    type: DataType.BOOLEAN,
    allowNull: false,
    defaultValue: false,
  })
  is_demo?: boolean;

  @Column({
    type: DataType.DATE,
  })
  created_at?: Date;
}
