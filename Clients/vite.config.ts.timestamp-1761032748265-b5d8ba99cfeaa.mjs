// vite.config.ts
import { defineConfig } from "file:///A:/VerifyWiseRepository/verifywise/Clients/node_modules/vite/dist/node/index.js";
import react from "file:///A:/VerifyWiseRepository/verifywise/Clients/node_modules/@vitejs/plugin-react-swc/index.mjs";
import svgr from "file:///A:/VerifyWiseRepository/verifywise/Clients/node_modules/@svgr/rollup/dist/index.js";

// package.json
var version = "1.0.0";

// vite.config.ts
var vite_config_default = defineConfig({
  plugins: [
    react(),
    svgr()
  ],
  server: {
    host: "0.0.0.0",
    port: process.env.VITE_APP_PORT ? parseInt(process.env.VITE_APP_PORT) : 5173
  },
  build: {
    // Generate manifest for cache busting
    manifest: true,
    rollupOptions: {
      output: {
        // Add hash to filenames for cache busting
        entryFileNames: "assets/[name]-[hash].js",
        chunkFileNames: "assets/[name]-[hash].js",
        assetFileNames: "assets/[name]-[hash].[ext]"
      }
    }
  },
  define: { global: "globalThis", __APP_VERSION__: JSON.stringify(version) }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiQTpcXFxcVmVyaWZ5V2lzZVJlcG9zaXRvcnlcXFxcdmVyaWZ5d2lzZVxcXFxDbGllbnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJBOlxcXFxWZXJpZnlXaXNlUmVwb3NpdG9yeVxcXFx2ZXJpZnl3aXNlXFxcXENsaWVudHNcXFxcdml0ZS5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0E6L1ZlcmlmeVdpc2VSZXBvc2l0b3J5L3ZlcmlmeXdpc2UvQ2xpZW50cy92aXRlLmNvbmZpZy50c1wiO2ltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ2aXRlXCI7XHJcbmltcG9ydCByZWFjdCBmcm9tIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3Qtc3djXCI7XHJcbmltcG9ydCBzdmdyIGZyb20gXCJAc3Znci9yb2xsdXBcIjtcclxuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuL3BhY2thZ2UuanNvblwiXHJcblxyXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xyXG4gIHBsdWdpbnM6IFtcclxuICAgIHJlYWN0KCksXHJcbiAgICBzdmdyKCksXHJcbiAgXSxcclxuICBzZXJ2ZXI6IHtcclxuICAgIGhvc3Q6IFwiMC4wLjAuMFwiLFxyXG4gICAgcG9ydDogcHJvY2Vzcy5lbnYuVklURV9BUFBfUE9SVFxyXG4gICAgICA/IHBhcnNlSW50KHByb2Nlc3MuZW52LlZJVEVfQVBQX1BPUlQpXHJcbiAgICAgIDogNTE3MyxcclxuICB9LFxyXG4gIGJ1aWxkOiB7XHJcbiAgICAvLyBHZW5lcmF0ZSBtYW5pZmVzdCBmb3IgY2FjaGUgYnVzdGluZ1xyXG4gICAgbWFuaWZlc3Q6IHRydWUsXHJcbiAgICByb2xsdXBPcHRpb25zOiB7XHJcbiAgICAgIG91dHB1dDoge1xyXG4gICAgICAgIC8vIEFkZCBoYXNoIHRvIGZpbGVuYW1lcyBmb3IgY2FjaGUgYnVzdGluZ1xyXG4gICAgICAgIGVudHJ5RmlsZU5hbWVzOiAnYXNzZXRzL1tuYW1lXS1baGFzaF0uanMnLFxyXG4gICAgICAgIGNodW5rRmlsZU5hbWVzOiAnYXNzZXRzL1tuYW1lXS1baGFzaF0uanMnLFxyXG4gICAgICAgIGFzc2V0RmlsZU5hbWVzOiAnYXNzZXRzL1tuYW1lXS1baGFzaF0uW2V4dF0nXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIGRlZmluZTogeyBnbG9iYWw6IFwiZ2xvYmFsVGhpc1wiLCBfX0FQUF9WRVJTSU9OX186IEpTT04uc3RyaW5naWZ5KHZlcnNpb24pIH0sXHJcbn0pO1xyXG4iLCAie1xyXG4gIFwibmFtZVwiOiBcInZlcmlmeXdpc2VcIixcclxuICBcInByaXZhdGVcIjogdHJ1ZSxcclxuICBcInZlcnNpb25cIjogXCIxLjAuMFwiLFxyXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxyXG4gIFwic2NyaXB0c1wiOiB7XHJcbiAgICBcImRldlwiOiBcInZpdGUgLS1ob3N0XCIsXHJcbiAgICBcImJ1aWxkXCI6IFwidHNjIC1iICYmIG5vZGUgc2NyaXB0cy9idWlsZC5qc1wiLFxyXG4gICAgXCJidWlsZC1kZXZcIjogXCJ2aXRlIGJ1aWxkXCIsXHJcbiAgICBcImJ1aWxkOm9yaWdpbmFsXCI6IFwidHNjIC1iICYmIHZpdGUgYnVpbGRcIixcclxuICAgIFwibGludFwiOiBcImVzbGludCAuXCIsXHJcbiAgICBcInByZXZpZXdcIjogXCJ2aXRlIHByZXZpZXdcIlxyXG4gIH0sXHJcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xyXG4gICAgXCJAZW1vdGlvbi9yZWFjdFwiOiBcIl4xMS4xMy4zXCIsXHJcbiAgICBcIkBlbW90aW9uL3N0eWxlZFwiOiBcIl4xMS4xMy4wXCIsXHJcbiAgICBcIkBmb250c291cmNlL3JvYm90b1wiOiBcIl41LjEuMFwiLFxyXG4gICAgXCJAbXVpL2xhYlwiOiBcIl42LjAuMC1iZXRhLjEwXCIsXHJcbiAgICBcIkBtdWkvbWF0ZXJpYWxcIjogXCJeNi4xLjZcIixcclxuICAgIFwiQG11aS9zdHlsZWQtZW5naW5lLXNjXCI6IFwiXjYuMS4wXCIsXHJcbiAgICBcIkBtdWkveC1jaGFydHNcIjogXCJeOC40LjBcIixcclxuICAgIFwiQG11aS94LWRhdGUtcGlja2Vyc1wiOiBcIl43LjI5LjRcIixcclxuICAgIFwiQHBsYXRlanMvYXV0b2Zvcm1hdFwiOiBcIl40OS4wLjBcIixcclxuICAgIFwiQHBsYXRlanMvYmFzaWMtbm9kZXNcIjogXCJeNDkuMC4wXCIsXHJcbiAgICBcIkBwbGF0ZWpzL2Jhc2ljLXN0eWxlc1wiOiBcIl40OS4wLjBcIixcclxuICAgIFwiQHBsYXRlanMvY29kZS1ibG9ja1wiOiBcIl40OS4wLjBcIixcclxuICAgIFwiQHBsYXRlanMvZmxvYXRpbmdcIjogXCJeNTAuMi41XCIsXHJcbiAgICBcIkBwbGF0ZWpzL2xpbmtcIjogXCJeNTAuMi41XCIsXHJcbiAgICBcIkBwbGF0ZWpzL2xpc3QtY2xhc3NpY1wiOiBcIl40OS4xLjBcIixcclxuICAgIFwiQHBsYXRlanMvbWVkaWFcIjogXCJeNDkuMC4wXCIsXHJcbiAgICBcIkBwbGF0ZWpzL3N1Z2dlc3Rpb25cIjogXCJeNDkuMC4wXCIsXHJcbiAgICBcIkByYWRpeC11aS9yZWFjdC1kaWFsb2dcIjogXCJeMS4xLjE1XCIsXHJcbiAgICBcIkByYWRpeC11aS9yZWFjdC1wb3BvdmVyXCI6IFwiXjEuMS4xNVwiLFxyXG4gICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2VwYXJhdG9yXCI6IFwiXjEuMS43XCIsXHJcbiAgICBcIkByYWRpeC11aS9yZWFjdC1zbG90XCI6IFwiXjEuMi4zXCIsXHJcbiAgICBcIkByYWRpeC11aS9yZWFjdC12aXN1YWxseS1oaWRkZW5cIjogXCJeMS4yLjNcIixcclxuICAgIFwiQHJlZHV4anMvdG9vbGtpdFwiOiBcIl4yLjIuN1wiLFxyXG4gICAgXCJAc3Znci9yb2xsdXBcIjogXCJeOC4xLjBcIixcclxuICAgIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI6IFwiXjUuODQuMlwiLFxyXG4gICAgXCJAdGFuc3RhY2svcmVhY3QtcXVlcnktZGV2dG9vbHNcIjogXCJeNS44NC4yXCIsXHJcbiAgICBcIkB0aXB0YXAvcmVhY3RcIjogXCJeMi44LjBcIixcclxuICAgIFwiQHRpcHRhcC9zdGFydGVyLWtpdFwiOiBcIl4yLjguMFwiLFxyXG4gICAgXCJAdHlwZXMvcmVhY3QtZ3JpZC1sYXlvdXRcIjogXCJeMS4zLjVcIixcclxuICAgIFwiQHVkZWNvZGUvcGxhdGVcIjogXCJeNDguMC41XCIsXHJcbiAgICBcIkB1ZGVjb2RlL3BsYXRlLWNvbW1vblwiOiBcIl40MS4wLjEzXCIsXHJcbiAgICBcIkB1ZGVjb2RlL3BsYXRlLXNlcmlhbGl6ZXItaHRtbFwiOiBcIl4yMS41LjFcIixcclxuICAgIFwiQHVkZWNvZGUvenVzdG9vZFwiOiBcIjIuMC4wXCIsXHJcbiAgICBcIkB1cHB5L2NvcmVcIjogXCJeNC4yLjNcIixcclxuICAgIFwiQHVwcHkvZGFzaGJvYXJkXCI6IFwiXjQuMS4yXCIsXHJcbiAgICBcIkB1cHB5L2RyYWctZHJvcFwiOiBcIl40LjAuNFwiLFxyXG4gICAgXCJAdXBweS9kcm9wLXRhcmdldFwiOiBcIl4zLjAuMVwiLFxyXG4gICAgXCJAdXBweS9maWxlLWlucHV0XCI6IFwiXjQuMC4zXCIsXHJcbiAgICBcIkB1cHB5L2dvbGRlbi1yZXRyaWV2ZXJcIjogXCJeNC4wLjFcIixcclxuICAgIFwiQHVwcHkvcHJvZ3Jlc3MtYmFyXCI6IFwiXjQuMC4xXCIsXHJcbiAgICBcIkB1cHB5L3JlYWN0XCI6IFwiXjQuMi4xXCIsXHJcbiAgICBcIkB1cHB5L3dlYmNhbVwiOiBcIl40LjEuMVwiLFxyXG4gICAgXCJAdXBweS94aHItdXBsb2FkXCI6IFwiXjQuMi4yXCIsXHJcbiAgICBcImF4aW9zXCI6IFwiXjEuMTIuMFwiLFxyXG4gICAgXCJjbWRrXCI6IFwiXjEuMS4xXCIsXHJcbiAgICBcImRheWpzXCI6IFwiXjEuMTEuMTNcIixcclxuICAgIFwiZG9tcHVyaWZ5XCI6IFwiXjMuMi42XCIsXHJcbiAgICBcImRvdGVudlwiOiBcIl4xNi40LjdcIixcclxuICAgIFwiZnJhbWVyLW1vdGlvblwiOiBcIl4xMi4xMS4wXCIsXHJcbiAgICBcImpzcGRmXCI6IFwiXjMuMC4zXCIsXHJcbiAgICBcImxpYnBob25lbnVtYmVyLWpzXCI6IFwiXjEuMTEuOVwiLFxyXG4gICAgXCJsb3dsaWdodFwiOiBcIl4zLjMuMFwiLFxyXG4gICAgXCJsdWNpZGUtcmVhY3RcIjogXCJeMC41NDQuMFwiLFxyXG4gICAgXCJtYXRlcmlhbC11aS1wb3B1cC1zdGF0ZVwiOiBcIl41LjMuMVwiLFxyXG4gICAgXCJwYWtvXCI6IFwiXjIuMS4wXCIsXHJcbiAgICBcInBsYXRlanNcIjogXCJeNDkuMS4xM1wiLFxyXG4gICAgXCJwbG90bHkuanMtYmFzaWMtZGlzdFwiOiBcIl4zLjEuMFwiLFxyXG4gICAgXCJyZWFjdFwiOiBcIl4xOC4zLjFcIixcclxuICAgIFwicmVhY3QtY29va2llXCI6IFwiXjguMC4xXCIsXHJcbiAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4zLjFcIixcclxuICAgIFwicmVhY3QtZ3JpZC1sYXlvdXRcIjogXCJeMS41LjJcIixcclxuICAgIFwicmVhY3Qtam95cmlkZVwiOiBcIl4yLjkuM1wiLFxyXG4gICAgXCJyZWFjdC1wbG90bHkuanNcIjogXCJeMi42LjBcIixcclxuICAgIFwicmVhY3QtcmVkdXhcIjogXCJeOS4xLjJcIixcclxuICAgIFwicmVhY3Qtcm91dGVyLWRvbVwiOiBcIl42LjI2LjJcIixcclxuICAgIFwicmVkdXhcIjogXCJeNS4wLjFcIixcclxuICAgIFwicmVkdXgtcGVyc2lzdFwiOiBcIl42LjAuMFwiLFxyXG4gICAgXCJzdHlsZWQtY29tcG9uZW50c1wiOiBcIl42LjEuMTNcIixcclxuICAgIFwidmFsaWRhdG9yXCI6IFwiXjEzLjEyLjBcIixcclxuICAgIFwienVzdGFuZFwiOiBcIjQuNS41XCJcclxuICB9LFxyXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcclxuICAgIFwiQGVzbGludC9qc1wiOiBcIl45LjkuMFwiLFxyXG4gICAgXCJAc3Znci93ZWJwYWNrXCI6IFwiXjguMS4wXCIsXHJcbiAgICBcIkB0eXBlcy9kb21wdXJpZnlcIjogXCJeMy4wLjVcIixcclxuICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMjIuMTIuMFwiLFxyXG4gICAgXCJAdHlwZXMvcGFrb1wiOiBcIl4yLjAuM1wiLFxyXG4gICAgXCJAdHlwZXMvcmVhY3RcIjogXCJeMTguMy41XCIsXHJcbiAgICBcIkB0eXBlcy9yZWFjdC1kb21cIjogXCJeMTguMy4wXCIsXHJcbiAgICBcIkB0eXBlcy92YWxpZGF0b3JcIjogXCJeMTMuMTIuMlwiLFxyXG4gICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdC1zd2NcIjogXCJeMy41LjBcIixcclxuICAgIFwiZG90ZW52LXdlYnBhY2tcIjogXCJeOC4xLjBcIixcclxuICAgIFwiZXNsaW50XCI6IFwiXjkuOS4wXCIsXHJcbiAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtaG9va3NcIjogXCJeNS4xLjAtcmMuMFwiLFxyXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LXJlZnJlc2hcIjogXCJeMC40LjlcIixcclxuICAgIFwiZ2xvYmFsc1wiOiBcIl4xNS45LjBcIixcclxuICAgIFwidHlwZXNjcmlwdFwiOiBcIl41LjUuM1wiLFxyXG4gICAgXCJ0eXBlc2NyaXB0LWVzbGludFwiOiBcIl44LjAuMVwiLFxyXG4gICAgXCJ1cmwtbG9hZGVyXCI6IFwiXjQuMS4xXCIsXHJcbiAgICBcInZpdGVcIjogXCJeNS40LjFcIlxyXG4gIH1cclxufVxyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQXdULFNBQVMsb0JBQW9CO0FBQ3JWLE9BQU8sV0FBVztBQUNsQixPQUFPLFVBQVU7OztBQ0NmLGNBQVc7OztBREdiLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzFCLFNBQVM7QUFBQSxJQUNQLE1BQU07QUFBQSxJQUNOLEtBQUs7QUFBQSxFQUNQO0FBQUEsRUFDQSxRQUFRO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixNQUFNLFFBQVEsSUFBSSxnQkFDZCxTQUFTLFFBQVEsSUFBSSxhQUFhLElBQ2xDO0FBQUEsRUFDTjtBQUFBLEVBQ0EsT0FBTztBQUFBO0FBQUEsSUFFTCxVQUFVO0FBQUEsSUFDVixlQUFlO0FBQUEsTUFDYixRQUFRO0FBQUE7QUFBQSxRQUVOLGdCQUFnQjtBQUFBLFFBQ2hCLGdCQUFnQjtBQUFBLFFBQ2hCLGdCQUFnQjtBQUFBLE1BQ2xCO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFBQSxFQUNBLFFBQVEsRUFBRSxRQUFRLGNBQWMsaUJBQWlCLEtBQUssVUFBVSxPQUFPLEVBQUU7QUFDM0UsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
