/**
 * Generates a markdown report for compliance tracker
 * @param frameworkId - The ID of the framework: EU AI Act
 * @param data - Project metadata including title and owner
 * @returns Promise<string> - Markdown formatted assessment tracker report
 */

import { getComplianceReportQuery } from '../../utils/reporting.utils';
import { ReportBodyData } from '../reportService';
import {ControlCategoryStructEUModel} from '../../models/EU/controlCategoryStructEU.model';
import { SubcontrolStructEU } from '../../models/EU/subControlStructEU.model';

type SubControlProps = SubcontrolStructEU & {
  implementation_details: string;
}

type ControlProps = {
  title: string;
  implementation_details: string;
  subControls: SubControlProps[];
}

type SubControlCategory = {
  data: ControlProps
};

type AllCompliances = ControlCategoryStructEUModel & {
  subControlCategories: SubControlCategory[];
};

export async function getComplianceMarkdown (
    frameworkId: number,
    data: ReportBodyData
  ) : Promise<string> {
    const reportData = await getComplianceReportData(frameworkId);   
  
  const complianceMD = `
VerifyWise compliance tracker report
========================

This report is generated by the VerifyWise Compliance Tracker. It aims to provide a way to demonstrate their claims about the risks of their AI systems.

- **Date** ${new Date().toLocaleDateString()}
- **Project** ${data.projectTitle}
- **Owner** ${data.projectOwner}

${reportData}
`
  return complianceMD;
}

/**
 * Retrieves all compliance tracker data by framworkId from DB
 * @param frameworkId - The ID of the framework
 * @returns Promise<string> - Compliance tracker data
*/
export async function getComplianceReportData (
  frameworkId: number
) : Promise<string> {
  let rows: string = ``;
  try {
    const reportData = await getComplianceReportQuery(frameworkId) as AllCompliances[];   
    if (reportData.length > 0) {
      rows = reportData.map(compliances =>{
        const  subTopic = compliances.subControlCategories?.length > 0
          ? compliances.subControlCategories.map((subcc) => {
            const controlCategoryData = `__${subcc.data.title}__<br> Implementation detail: ${subcc.data.implementation_details}`
            const questionList = subcc.data.subControls?.length > 0
              ? subcc.data.subControls.map((subcontrol, j) =>
                  `    ${j + 1}. __${subcontrol.title}__<br> Implementation detail: ${subcontrol.implementation_details}`).join('\n')
              : `No question for this topic.`;
            return `  - ${controlCategoryData}\n${questionList}\n`;
          }).join('\n')          
          : `No data`;
        
        return `__${compliances?.title}__\n${subTopic}\n`;
      }).join('\n');
    } else {
      rows = `-`
    }
  } catch (error) {
    console.error(error);
    throw new Error(`Error while fetching the compliance tracker data`);
  }

  return rows;
}